version: "3.8"

services:
  mongo:
    image: mongo:4.2.23
    restart: always
    volumes:
      - mongo_db_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MDB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MDB_PASSWORD}
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $MDB_USERNAME -p $MDB_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - application
    ports:
      - ${MDB_PORT}:27017

  mongo-express:
    image: mongo-express:1.0.0-alpha
    restart: always
    profiles:
      - dev
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MDB_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MDB_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MDB_USERNAME}:${MDB_PASSWORD}@${MDB_URL}
    networks:
      - application
    depends_on:
      mongo:
        condition: service_healthy

  mariadb:
    image: mariadb:10.7.8-focal
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ftripio
    volumes:
      - maria_db_data:/var/lib/mysql
    networks:
      - application
    ports:
      - ${DB_PORT}:3306

  adminer:
    image: adminer:4.8.1-standalone
    profiles:
      - dev
    restart: always
    networks:
      - application
    ports:
      - 8082:8080
    environment:
      ADMINER_DEFAULT_SERVER: mariadb
    depends_on:
      - mariadb

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RMQ_PASSWORD}
    networks:
      - application
      - monitoring
    ports:
      - 5672:5672
      - 15672:15672
      - 15692:15692
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
      - ./config/rabbitmq:/etc/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  user-service:
    image: ftripio/user-service-dev
    restart: always
    networks:
      - application
      - monitoring
    ports:
      - 80
    env_file: [".env.common", ".env.secrets"]
    environment:
      BOOKING_SERVICE_URL: http://booking-service:80
      HEALTH_CHECK_BASE_PATH: http://user-service:80

      DB_DATABASE: ${US_DATABASE}
      API_PREFIX: ${US_API_PREFIX}
    depends_on:
      rabbitmq:
        condition: service_healthy
      mariadb:
        condition: service_started

  catalog-service:
    image: ftripio/catalog-service-dev
    restart: always
    networks:
      - application
      - monitoring
    ports:
      - 80
    env_file: [".env.common", ".env.secrets"]
    environment:
      BOOKING_SERVICE_URL: http://booking-service:80
      HEALTH_CHECK_BASE_PATH: http://catalog-service:80

      DB_DATABASE: ${CS_DATABASE}
      API_PREFIX: ${CS_API_PREFIX}
    depends_on:
      rabbitmq:
        condition: service_healthy
      mariadb:
        condition: service_started

  booking-service:
    image: ftripio/booking-service-dev
    restart: always
    networks:
      - application
      - monitoring
    ports:
      - 80
    env_file: [".env.common", ".env.secrets"]
    environment:
      CATALOG_SERVICE_URL: http://catalog-service:80
      HEALTH_CHECK_BASE_PATH: http://booking-service:80

      DB_DATABASE: ${BS_DATABASE}
      API_PREFIX: ${BS_API_PREFIX}
    depends_on:
      rabbitmq:
        condition: service_healthy
      mariadb:
        condition: service_started

  notification-service:
    image: ftripio/notification-service-dev
    restart: always
    networks:
      - application
      - monitoring
    ports:
      - 80
    env_file: [".env.common", ".env.secrets"]
    environment:
      HEALTH_CHECK_BASE_PATH: http://notification-service:80

      MDB_DATABASE: ${NS_DATABASE}
      API_PREFIX: ${NS_API_PREFIX}
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  email-service:
    image: ftripio/email-service-dev
    restart: always
    networks:
      - application
      - monitoring
    ports:
      - 80
    env_file: [".env.common", ".env.secrets"]
    environment:
      HEALTH_CHECK_BASE_PATH: http://email-service:80

      MDB_DATABASE: ${ES_DATABASE}
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  realtime-communication-service:
    image: ftripio/realtime-communication-service-dev
    restart: always
    networks:
      - application
      - monitoring
    ports:
      - 80
    env_file: [".env.common", ".env.secrets"]
    environment:
      HEALTH_CHECK_BASE_PATH: http://realtime-communication-service:80
    depends_on:
      rabbitmq:
        condition: service_healthy

  image-service:
    image: ftripio/image-service-dev
    volumes:
      - images_data:/app/images
    networks:
      - application
    ports:
      - 80
    environment:
      PORT: 80
      AUTH_HOSTNAME: catalog-service
      AUTH_PORT: 80
      AUTH_PATH: /api/Accommodations/can-modify/

  frontend-service:
    image: ftripio/frontend-service-dev
    networks:
      - application
    ports:
      - 3000:3000

  http-proxy:
    image: nginx:stable-alpine3.17-slim
    volumes:
      - ./config/proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - application
    ports:
      - 4001:80
    depends_on:
      - user-service
      - catalog-service
      - booking-service
      - notification-service
      - email-service
      - realtime-communication-service
      - image-service

  prometheus:
    image: prom/prometheus
    volumes:
      - ./config/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
    depends_on:
      - cadvisor
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter
    expose:
      - 9100
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor-arm64:v0.47.0
    volumes:
      - /:/rootfs:ro
      # - /var/run:/var/run:rw !!!!!!!!! TODO - FOR WINDOWS
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:9.5.2
    depends_on:
      loki:
        condition: service_healthy
      prometheus:
        condition: service_started
    ports:
      - 4000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/dashboards
    env_file:
      - config.monitoring
    networks:
      - monitoring

  loki:
    image: grafana/loki:main-5206e3a
    networks:
      - monitoring
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: wget -q --tries=1 -O- http://loki:3100/ready
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 10s

  jaeger:
    image: jaegertracing/all-in-one:1.45
    restart: always
    networks:
      - monitoring
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 16687:16687
      - 14268:14268
      - 14269:14269
      - 9411:9411

volumes:
  prometheus_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./prometheus-data
  grafana_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./grafana-data
  maria_db_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./maria-db-data
  mongo_db_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./mongo-db-data
  images_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./images

networks:
  application:
    driver: bridge
  monitoring:
    driver: bridge
